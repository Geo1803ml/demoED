#include <iostream>
#include <vector>
using namespace std;

void printRange(int arr[], int low, int high) {
    cout << "[";
    for (int i = low; i <= high; ++i) {
        cout << arr[i] << (i==high? "" : ", ");
    }
    cout << "]";
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    cout << "  Partition: pivote=" << pivot << " (arr[" << high << "]) en rango [" << low << ".." << high << "] ";
    printRange(arr, low, high);
    cout << endl;
    int i = low - 1;

    for (int j = low; j < high; ++j) {
        cout << "    Comparando arr["<< j << "]=" << arr[j] << " con pivote=" << pivot << endl;
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
            cout << "    -> Intercambio arr["<< i << "] y arr["<< j << "] -> ";
            for (int k=0;k<=high;k++) cout << arr[k] << (k==high? "" : " ");
            cout << endl;
        }
    }
    swap(arr[i+1], arr[high]);
    cout << "    Colocando pivote en posición " << i+1 << " -> ";
    for (int k=0;k<=high;k++) cout << arr[k] << (k==high? "" : " ");
    cout << endl;
    return i+1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        cout << "\nQuickSort llamado en rango [" << low << ".." << high << "] -> ";
        printRange(arr, low, high);
        cout << endl;
        int pi = partition(arr, low, high);
        cout << "Partición completada. Pivote en índice " << pi << ". Estado completo: ";
        int n = high; // not full array length here, but we'll print full in caller if needed
        cout << endl;
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {10, 80, 30, 90, 40, 50, 70};
    int n = sizeof(arr)/sizeof(arr[0]);

    cout << "Arreglo inicial: ";
    for (int i=0;i<n;i++) cout << arr[i] << (i==n-1? "" : " ");
    cout << endl;

    quickSort(arr, 0, n-1);

    cout << "\nArreglo ordenado: ";
    for (int i=0;i<n;i++) cout << arr[i] << (i==n-1? "" : " ");
    cout << endl;
    return 0;
}
