#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int hash_func(int x, int mod) { return abs(x) % mod; }

vector<int> hash_sort(const vector<int>& arr, int mod) {
    vector<int> hs, vals;
    for (int v : arr) {
        int h = hash_func(v, mod);
        int pos = hs.size();
        while (pos > 0 && (hs[pos - 1] > h || (hs[pos - 1] == h && vals[pos - 1] > v))) pos--;
        hs.insert(hs.begin() + pos, h);
        vals.insert(vals.begin() + pos, v);
    }
    return vals;
}

void insertion_sort(vector<int>& arr) {
    for (int i = 1; i < arr.size(); ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

int main() {
    vector<int> arr = {72, 18, 33, 91, 44, 67, 29, 83, 52, 10};
    int mod = 6;

    cout << "Original: ";
    for (int x : arr) cout << x << " ";
    cout << "\n";

    auto hashSorted = hash_sort(arr, mod);
    cout << "\nDespués del ordenamiento por hash: ";
    for (int x : hashSorted) cout << x << " ";
    cout << "\n";

    insertion_sort(hashSorted);
    cout << "Después del ordenamiento por inserción: ";
    for (int x : hashSorted) cout << x << " ";
    cout << "\n";
}


