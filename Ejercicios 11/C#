using System;

class HashThenInsertion
{
    static int Hash(int x, int mod) => Math.Abs(x) % mod;

    // Ordenamiento por Hash
    static int[] HashSort(int[] arr, int mod)
    {
        int n = arr.Length;
        int[] hs = new int[n];
        int[] vals = new int[n];
        int length = 0;

        for (int k = 0; k < n; k++)
        {
            int v = arr[k];
            int h = Hash(v, mod);
            int pos = length;
            while (pos > 0 && (hs[pos - 1] > h || (hs[pos - 1] == h && vals[pos - 1] > v)))
            {
                hs[pos] = hs[pos - 1];
                vals[pos] = vals[pos - 1];
                pos--;
            }
            hs[pos] = h;
            vals[pos] = v;
            length++;
        }

        return vals;
    }

    // Ordenamiento por inserción
    static void InsertionSort(int[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    static void Main()
    {
        int[] arr = { 58, 27, 96, 45, 13, 89, 62, 31, 74, 10 };
        int mod = 7;

        Console.WriteLine("Original: " + string.Join(", ", arr));

        var hashSorted = HashSort(arr, mod);
        Console.WriteLine("\nDespués del ordenamiento por hash:");
        Console.WriteLine(string.Join(", ", hashSorted));

        InsertionSort(hashSorted);
        Console.WriteLine("\nDespués del ordenamiento por inserción:");
        Console.WriteLine(string.Join(", ", hashSorted));
    }
}
