using System;

class Program
{
    // Mantiene la propiedad de heap m치ximo
    static void Heapify(int[] arr, int n, int i)
    {
        int largest = i;        
        int left = 2 * i + 1;   
        int right = 2 * i + 2;  

        if (left < n && arr[left] > arr[largest])
            largest = left;

        if (right < n && arr[right] > arr[largest])
            largest = right;

        // Si el m치s grande no es el nodo actual, intercambia
        if (largest != i)
        {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            // Aplicar heapify recursivo al sub치rbol afectado
            Heapify(arr, n, largest);
        }
    }

    // Ordenamiento principal
    static void HeapSort(int[] arr)
    {
        int n = arr.Length;

        // Construir heap m치ximo
        for (int i = n / 2 - 1; i >= 0; i--)
            Heapify(arr, n, i);

        // Extraer elementos uno a uno del heap
        for (int i = n - 1; i > 0; i--)
        {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            Heapify(arr, i, 0);
        }
    }

    static void Main()
    {
        int[] arr = { 12, 11, 13, 5, 6, 7, 2 };
        Console.WriteLine("Arreglo original:");
        Console.WriteLine(string.Join(", ", arr));

        HeapSort(arr);

        Console.WriteLine("\nArreglo ordenado (Heap Sort):");
        Console.WriteLine(string.Join(", ", arr));
    }
}
