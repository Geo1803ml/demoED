// Mantiene la propiedad del heap máximo
function heapify(arr, n, i) {
  let largest = i;
  let left = 2 * i + 1;
  let right = 2 * i + 2;

  if (left < n && arr[left] > arr[largest]) largest = left;
  if (right < n && arr[right] > arr[largest]) largest = right;

  if (largest !== i) {
    [arr[i], arr[largest]] = [arr[largest], arr[i]];
    heapify(arr, n, largest);
  }
}

// Ordenamiento principal
function heapSort(arr) {
  let n = arr.length;

  // Construir heap máximo
  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) heapify(arr, n, i);

  // Extraer elementos uno por uno
  for (let i = n - 1; i > 0; i--) {
    [arr[0], arr[i]] = [arr[i], arr[0]];
    heapify(arr, i, 0);
  }
}

// Ejemplo
let arr = [14, 1, 7, 5, 46, 71, 22];
console.log("Arreglo original:");
console.log(arr);

heapSort(arr);

console.log("\nArreglo ordenado (Heap Sort):");
console.log(arr);
