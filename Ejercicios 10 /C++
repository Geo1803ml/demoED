#include <iostream>
using namespace std;

// Mantiene la propiedad del heap máximo
void heapify(int arr[], int n, int i) {
    int largest = i;       
    int left = 2 * i + 1;  
    int right = 2 * i + 2; 

    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// Ordenamiento principal
void heapSort(int arr[], int n) {
    
    // Construir heap máximo
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extraer elementos uno por uno
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Arreglo original:\n";
    for (int x : arr) cout << x << " ";

    heapSort(arr, n);

    cout << "\n\nArreglo ordenado (Heap Sort):\n";
    for (int x : arr) cout << x << " ";
    cout << endl;

    return 0;
}
